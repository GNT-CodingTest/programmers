정렬 --

    sorted(dict.items(), key=operator.itemgetter(0))
    => key값으로 정렬
    => sorted(dict.items())의 결과물의 0번째 아이템을 기준으로 정렬

    => sorted(dict.items(), key=operator.itemgetter(1))
    => value로 정렬하려면

    n번째 문자를 기준으로 정렬
        def sortkey(x):
            return x[n]
        strings.sort(key=sortkey)
        ----------------------------------
        sorted(strings, key=lambda x: x[n])
        설명 https://stackoverflow.com/questions/13669252/what-is-key-lambda

    a = {1: 5, 2: 6}
    print(list(map(lambda x: x*2, a)))
    => 2, 4

    딕셔너리 value값으로 정렬
    result = {}
    return sorted(result, key=lambda x: result[x], reverse=True)


    A => 65
    a => 97
    아스키 코드상으로 대문자가 이미 소문자보다 작음?!


번외 --
    int(num, 진법)
    x진법에서 10진법으로

    map()
    filter()


슬라이싱 --
    a = [] 이여도
    a[-1:] == [i] 슬라이싱 가능
    슬라이싱은 인덱스 오류가 안남?!
    비교는 슬라이싱이 리스트 형식이여서 비교값도 리스트 형태로

    패턴 n개 생성후 n까지 자르기
    ("수박" * n)[:n]
    "수박"*(n//2) + "수"*(n%2)


초기화 --
    앞에 변수가 1이면 앞에 변수를, 0이면 뒤에 변수를 리턴
    sorted([n for n in arr if n%divisor == 0]) or [-1]

탐색 --
    list.index(a)

체크(확인) --
    isdigit() 숫자인가
    isalpha() 알파벳인가
    islower()
    isupper()

for else --
    for문이 중간에 break 등으로 끊기지 않고, 끝까지 수행 되었을 때 수행하는 코드를 담고 있습니다.

    data = [2, 4, 5, 10, 3]
    for i in data:
        if i > 10:
            break

    else: print('10 보다 큰 수 없음')

for value_a, value_b in zip(a, b):
    인덱스가 같은 리스트의 변수 두개를 사용할 시 zip() 함수로 묶어서 실행

q, r = divmod(x, y)
    q은 x를 y로 나눈 값, 즉 몫 / r은 x를 y로 나눈 나머지


문자열 --
    n만큼 오른쪽 정렬하고 빈칸은 0으로 채워라
    rjust(n, 0)

    'strstr'에서 'x'가 있으면 'X'로 바꿔라
    sub('x', 'X', 'strstr')

    replace('1','#')

    문자열에서 len()은 속도를 잡아 먹는다.
    __len__이 없어서 그런듯

정규표현식 --
    import re

    # + => 1회 이상, * => 0회 이상, ? => 0번 또는 1번
    # 유니코드 (str) 패턴일 때: \d => [0-9]
    p = re.compile('(\d+)([SDT])([*#]?)') <= 패턴

    dart = p.findall(dart_result) <= 패턴에 맞게
    # dart => [('1', 'S', ''), ('2', 'D', '*'), ('3', 'T', '')]

    => 정규표현식으로 데이터 마음대로 처리

수학 --

    def solution(n, m):
        최대 공약수
        gcd = lambda a, b: b if not a % b else gcd(b, a % b)
        최소 공배수
        lcm = lambda a, b: a*b//gcd(a, b)

        return [gcd(n, m), lcm(n, m)]

    두 수 사이의 합
    (abs(a-b)+1)*(a+b)//2

    순열, 조합
    import itertools

    permutations('ABCD', 2) --> AB AC AD BA BC BD CA CB CD DA DB DC
    permutations(range(3)) --> 012 021 102 120 201 210

    combinations('ABCD', 2) --> AB AC AD BC BD CD
    combinations(range(4), 3) --> 012 013 023 123